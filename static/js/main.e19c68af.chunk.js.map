{"version":3,"sources":["Tmdb.js","Components/MovieRow.js","Components/FeaturedMovie.js","Components/Header.js","App.js","index.js"],"names":["API_KEY","basicFetch","endpoint","a","fetch","req","json","getHomeList","slug","title","items","getMovieInfo","movieId","type","info","useState","scrollX","setScrollX","className","onClick","x","Math","round","window","innerWidth","style","fontSize","listW","results","length","marginLeft","width","map","item","key","src","poster_path","alt","original_title","firstDate","Date","first_air_date","genres","i","push","name","background","backgroundPosition","backgroundImage","backdrop_path","vote_average","getFullYear","number_of_seasons","overview","href","id","join","black","movieList","setMovieList","featuredData","setFeaturedData","blackHeader","setBlackHeader","useEffect","Tmdb","list","originals","filter","randomChosen","floor","random","chosen","chosenInfo","loadAll","scrollListener","scrollY","addEventListener","removeEventListener","role","aria-label","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e19c68af.chunk.js","sourcesContent":["const API_KEY = '0be0a6640f397109d224ae5178e00e16';\r\nconst API_BASE = 'https://api.themoviedb.org/3';\r\n\r\n/*\r\n- Originais da Netflix\r\n- Recomendados (trending)\r\n- Em alta (top rated)\r\n- Ação\r\n- Comédia\r\n- Terror\r\n- Romance\r\n- Documentários\r\n*/\r\n\r\nconst basicFetch = async (endpoint) => {\r\n    const req = await fetch(`${API_BASE}${endpoint}`);\r\n    const json = await req.json();\r\n    return json;\r\n}\r\n\r\nexport default {\r\n    getHomeList: async () => {\r\n        return [\r\n            {\r\n                slug: 'originals',\r\n                title: 'Originais do Netflix',\r\n                items: await basicFetch (`/discover/tv?with_network=213&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'trending',\r\n                title: 'Recomendados para Você',\r\n                items: await basicFetch (`/trending/all/week?language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'toprated',\r\n                title: 'Em alta',\r\n                items: await basicFetch (`/movie/top_rated?language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'action',\r\n                title: 'Ação',\r\n                items: await basicFetch (`/discover/movie?with_genres=28&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'comedy',\r\n                title: 'Comédia',\r\n                items: await basicFetch (`/discover/movie?with_genres=35&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'horror',\r\n                title: 'Terror',\r\n                items: await basicFetch (`/discover/movie?with_genres=27&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'romance',\r\n                title: 'Romance',\r\n                items: await basicFetch (`/discover/movie?with_genres=10749&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'documentary',\r\n                title: 'Documentários',\r\n                items: await basicFetch (`/discover/movie?with_genres=99&language=pt-BR&api_key=${API_KEY}`)\r\n            }\r\n        ];\r\n    },\r\n    getMovieInfo: async (movieId, type) => {\r\n        let info = {};\r\n        if(movieId){\r\n            switch (type){\r\n                case 'movie':\r\n                    info = await basicFetch(`/movie/${movieId}?language=pt-BR&api_key=${API_KEY}`);\r\n                break;\r\n                case 'tv':\r\n                    info = await basicFetch(`/tv/${movieId}?language=pt-BR&api_key=${API_KEY}`);\r\n                break;\r\n                default:\r\n                    info = null;\r\n                break;\r\n            }\r\n        }\r\n        return info;\r\n    }\r\n}","import {React, useState} from 'react';\r\nimport './MovieRow.css';\r\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\n\r\nexport default ({ title, items }) => {\r\n\r\n    const [scrollX, setScrollX] = useState (0);\r\n\r\n    const handleLeftArrow = () => {\r\n        let x = scrollX + Math.round(window.innerWidth / 2);\r\n        if (x > 0){\r\n            x = 0;\r\n        }\r\n        setScrollX(x);\r\n    }\r\n\r\n    const handleRightArrow = () => {\r\n        let x = scrollX - Math.round(window.innerWidth / 2);\r\n        let listW = items.results.length * 150;\r\n        if((window.innerWidth - listW) > x){\r\n            x = (window.innerWidth - listW) - 60;\r\n        }\r\n        setScrollX(x);\r\n    }\r\n\r\n    return (\r\n        <div className=\"movieRow\">\r\n            <h2>{title}</h2>\r\n            <div className=\"movieRow--left\" onClick={handleLeftArrow}>\r\n            <NavigateBeforeIcon style={{fontSize: 50}} />\r\n            </div>\r\n            <div className=\"movieRow--right\" onClick={handleRightArrow}>\r\n            <NavigateNextIcon style={{fontSize: 50}} />\r\n            </div>\r\n            <div className=\"movieRow--listarea\">\r\n                <div className=\"movieRow--list\" style={{marginLeft: scrollX, width: items.results.length * 150}}>\r\n                    {items.results.length > 0 && items.results.map((item, key) => (\r\n                        <div className=\"movieRow--item\">\r\n                            <img src={`https://image.tmdb.org/t/p/w300${item.poster_path}`} alt={item.original_title} />\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './FeaturedMovie.css';\r\n\r\nexport default ({ item }) => {\r\n\r\n    let firstDate = new Date(item.first_air_date);\r\n    let genres = [];\r\n    for (let i in item.genres) {\r\n        genres.push(item.genres[i].name)\r\n    }\r\n\r\n    return (\r\n        <section className=\"featured\" style={{ background: 'cover', backgroundPosition: 'center', backgroundImage: `url(https://image.tmdb.org/t/p/original${item.backdrop_path})` }}>\r\n            <div className=\"featured--vertical\">\r\n                <div className=\"featured--horizontal\">\r\n                    <div className=\"featured--name\">\r\n                        {item.name}\r\n                    </div>\r\n                    <div className=\"featured--info\">\r\n                        <div className=\"featured--points\"> {item.vote_average} pontos</div>\r\n                        <div className=\"featured--year\">{firstDate.getFullYear()}</div>\r\n                        <div className=\"featured--seasons\">{item.number_of_seasons} temporada{item.number_of_seasons !== 1 ? 's' : ''}</div>\r\n                        <div className=\"featured--description\">{item.overview}</div>\r\n                        <div className=\"featured--buttons\">\r\n                            <a href={`/watch/${item.id}`} className=\"featured--watchbutton\"> ► Assistir</a>\r\n                            <a href={`/list/add${item.id}`} className=\"featured--mylistbutton\">+ Minha Lista</a>\r\n                        </div>\r\n                        <div className=\"featured--genres\"><strong>Gêneros:</strong> {genres.join(', ')}</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}","import React from 'react';\r\nimport './Header.css';\r\n\r\nexport default ({black}) => {\r\n    return (\r\n        <header className={black ? 'black' : ''}>\r\n            <div className=\"header--logo\">\r\n                <a href =\"/\">\r\n                    <img src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\" />\r\n                </a>\r\n            </div>\r\n            <div className=\"header--user\">\r\n                <a href=\"/\">\r\n                    <img src=\"https://i.pinimg.com/originals/0d/dc/ca/0ddccae723d85a703b798a5e682c23c1.png\" />\r\n                </a>\r\n            </div>\r\n        </header>\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\nimport Tmdb from './Tmdb'\nimport './App.css';\nimport MovieRow from './Components/MovieRow';\nimport FeaturedMovie from './Components/FeaturedMovie';\nimport Header from './Components/Header';\n\nexport default () => {\n\n  const [movieList, setMovieList] = useState([]);\n  const [featuredData, setFeaturedData] = useState([]);\n  const [blackHeader, setBlackHeader] = useState(false)\n  useEffect(() => {\n    const loadAll = async () => {\n      // Pegando a lista TOTAL\n      let list = await Tmdb.getHomeList();\n      setMovieList(list);\n\n      // Pegando os Featured de Séries\n      let originals = list.filter(i => i.slug === 'originals');\n      let randomChosen = Math.floor(Math.random() * (originals[0].items.results.length - 1));\n      let chosen = originals[0].items.results[randomChosen];\n      let chosenInfo = await Tmdb.getMovieInfo(chosen.id, 'tv');\n      setFeaturedData(chosenInfo);\n\n    }\n\n    loadAll();\n  }, []);\n\n  useEffect(() => {\n    const scrollListener = () => {\n      if (window.scrollY > 15) {\n        setBlackHeader(true)\n      } else {\n        setBlackHeader(false);\n      }\n    }\n    window.addEventListener(\"scroll\", scrollListener);\n    return () => {\n      window.removeEventListener(\"scroll\", scrollListener);\n    }\n  }, [])\n\n  return (\n    <div className=\"page\">\n\n      <Header black={blackHeader} />\n\n      {featuredData && <FeaturedMovie item={featuredData} />}\n\n      <section className=\"lists\">\n        {movieList.map((item, key) => (\n          <MovieRow key={key} title={item.title} items={item.items} />\n        ))}\n      </section>\n      <footer>\n        Desenvolvido com <span role=\"img\" aria-label=\"coração\">❤️</span> por Elvis <br />\n        Direitos de imagem para Netflix<br />\n        Dados obtidos no site da Themoviedb.org\n      </footer>\n      {movieList.length <= 0 &&\n        <div className=\"loading\">\n          <img src=\"https://cdn.lowgif.com/small/0534e2a412eeb281-the-counterintuitive-tech-behind-netflix-s-worldwide.gif\" alt=\"Carregando\" />\n        </div>\n      }\n    </div>\n  )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}